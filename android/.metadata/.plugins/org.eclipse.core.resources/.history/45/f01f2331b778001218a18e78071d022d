package com.example.helloworld;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONObject;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class MainActivity extends Activity {
	
	private TextView loginMessage;
	private EditText user;
	private EditText password;
	private MainActivity myApp = this; 
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        loginMessage = (TextView) findViewById(R.id.LoginMessage);
        user = (EditText) findViewById(R.id.user);
        password = (EditText) findViewById(R.id.password);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
    
    /** Called when the user clicks the Login button */
    public void login(View view) {
        String stringUrl = "http://enigmatic-retreat-6639.herokuapp.com/users/login";
        ConnectivityManager connMgr = (ConnectivityManager) 
            getSystemService(Context.CONNECTIVITY_SERVICE);
        //NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
        //if (networkInfo != null && networkInfo.isConnected()) {
        if (true) {
            new getJSON().execute(stringUrl);
        } else {
            loginMessage.setText("No network connection available.");
        }
    }

    /** Called when the user clicks the Add User button */
    public void addUser(View view) {
        String stringUrl = "http://enigmatic-retreat-6639.herokuapp.com/users/add";
        ConnectivityManager connMgr = (ConnectivityManager) 
            getSystemService(Context.CONNECTIVITY_SERVICE);
        //NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
        //if (networkInfo != null && networkInfo.isConnected()) {
        if (true) {
            new getJSON().execute(stringUrl);
        } else {
            loginMessage.setText("No network connection available.");
        }
    }
    
    // Uses AsyncTask to create a task away from the main UI thread. This task takes a 
    // URL string and uses it to create an HttpUrlConnection. Once the connection
    // has been established, the AsyncTask downloads the JSON data at the URL
    private class getJSON extends AsyncTask {
      
    	protected JSONObject doInBackground(Object... urls) {
           // params comes from the execute() call: params[0] is the url.
           try {
               return postUrl((String) urls[0]);
           } catch (IOException e) {
               return null;
           }
       }
       // onPostExecute saves JSON Object for Activity to access later
       protected void onPostExecute(Object o) {
    	   try {
	           JSONObject json = (JSONObject) o; 
	    	   if (json != null) {
	    		   switch (json.getInt("errCode")) {
	    			   case 1:
	    				   Intent intent = new Intent(myApp, WelcomeMessageActivity.class);
	    				   startActivity(intent);
	    				   break;
	        		   loginMessage.setText("Opps, wrong username and/or password");
	    		   }
	    	   }
    	   } catch (Exception e) {
    		   loginMessage.setText("Something Unexpected happened");
    	   }
       }
       
    // Given a URL, establishes an HttpUrlConnection and retrieves
    // the web page content as a InputStream, which it returns as
    // a string.
    private JSONObject postUrl(String myurl) throws IOException {
        InputStream is = null;   
        try {
            URL url = new URL(myurl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setReadTimeout(10000 /* milliseconds */);
            conn.setConnectTimeout(15000 /* milliseconds */);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            // Starts the query
            conn.connect();
        	// Post JSON data
            JSONObject jsonToSend = new JSONObject();
            jsonToSend.put("user", user.getText().toString());
            jsonToSend.put("password", password.getText().toString());
        	//byte[] outputBytes = jsonString.getBytes("UTF-8");
        	OutputStream os = conn.getOutputStream();
        	os.write(jsonToSend.toString().getBytes());
         	Log.v("postUrl", Integer.valueOf(conn.getResponseCode()).toString());
            if(conn.getResponseCode() == 200) {
                // Connection was established. Get the content. 
            	is = conn.getInputStream();
            	String jsonString = convertStreamToString(is);
            	Log.v("postUrl", jsonString);
	            // Convert the InputStream into a JSON Object
	            return new JSONObject(jsonString);
            } else {
            	return null;
            }
            
        // Makes sure that the InputStream is closed after the app is
        // finished using it.
        } catch (Exception e) {
        	Log.v("postUrl", e.getMessage());
        	return null;
    	} finally {
            if (is != null) {
                is.close();
            } 
        }
    }
    
    private String convertStreamToString(InputStream is) {
        /*
         * To convert the InputStream to String we use the BufferedReader.readLine()
         * method. We iterate until the BufferedReader return null which means
         * there's no more data to read. Each line will appended to a StringBuilder
         * and returned as String.
         */
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();
 
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }

   }
    
}
